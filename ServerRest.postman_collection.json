{
	"info": {
		"_postman_id": "b830bc06-e941-4453-9c38-b27ff125e602",
		"name": "ServerRest",
		"description": "# 📌 ServerRest_API\n\n- Descrição: é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.\n    \n- Documentação: [ServeRest Swagger](https://serverest.dev/#/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12268149",
		"_collection_link": "https://restless-eclipse-911620.postman.co/workspace/Estudos~39778abb-7414-43e0-af4b-c1d4996580bb/collection/12268149-b830bc06-e941-4453-9c38-b27ff125e602?action=share&source=collection_link&creator=12268149"
	},
	"item": [
		{
			"name": "✅Login",
			"item": [
				{
					"name": "[CT001]Validar dados invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"aaa@aa.aaa\",\r\n    \"password\": \"aaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT002]]Validar campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\",\r",
									"    \"password\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT003]]Validar obrigatoriedade do campo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT004]]Validar obrigatoriedade do campo password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"password\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT005]]Validar email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste#qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT006]Validar password invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário como Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Pegar campos específicos do body\r",
									"const login_email = requestBody.email;\r",
									"const login_pass = requestBody.password;\r",
									"\r",
									"// Armazena em variáveis de ambiente\r",
									"pm.environment.set(\"login_email\", login_email)\r",
									"pm.environment.set(\"login_pass\", login_pass);\r",
									"\r",
									"//===================================================================\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/usuarios",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT007]]Validar login Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const token_adm = response.authorization;\r",
									"pm.environment.unset(\"token_adm\");\r",
									"pm.environment.set(\"token_adm\", token_adm);\r",
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorization\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"authorization\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Pegar campos específicos do body\r",
									"const email_nok_adm = requestBody.email;\r",
									"const pass_nok_adm = requestBody.password;\r",
									"\r",
									"// Armazena em variáveis de ambiente\r",
									"pm.environment.set(\"email_nok_adm\", email_nok_adm)\r",
									"pm.environment.set(\"pass_nok_adm\", pass_nok_adm);\r",
									"\r",
									"//===================================================================\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/usuarios",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT008]]Validar login nok Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2seg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorization\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"authorization\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email_nok_adm}}\",\r\n    \"password\": \"{{pass_nok_adm}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "In",
									"value": "header",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Autentique o seu usuário para montar um carrinho e, se for administrador, gerenciar os produtosEndFragment\n\nLogin com sucesso\n\n\\--> Para efetuar o login com sucesso, deverá efetuar o cadstro de um usuário e em seguida efetuar o login com os dados necessários no body\n\nInforme o valor de `Authorization` retornado na rota _/login_\n\nName: `Authorization`\n\nIn: `header`\n\nEndFragment",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "✅Usuários",
			"item": [
				{
					"name": "✅Buscar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"get_nome\", pm.response.json().usuarios[0].nome)\r",
											"pm.environment.set(\"get_email\", pm.response.json().usuarios[0].email)\r",
											"pm.environment.set(\"get_senha\", pm.response.json().usuarios[0].password)\r",
											"pm.environment.set(\"get_adm\", pm.response.json().usuarios[0].administrador)\r",
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0]._id).to.be.eql(pm.environment.get(\"id_user\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?_id={{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Buscar usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].email).to.be.eql(pm.environment.get(\"get_email\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?email={{login_email}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_busca}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{senha_busca}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{login_email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Buscar usuário por nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].nome).to.be.eql(pm.environment.get(\"get_nome\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?nome={{get_nome}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{pass_cad}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{get_nome}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Buscar usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].nome).to.be.eql(pm.environment.get(\"get_nome\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?password={{get_senha}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_cad}}",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{get_senha}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Buscar usuário por adminitrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do adm está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].administrador).to.be.eql(pm.environment.get(\"get_adm\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?administrador=true",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "4alroLhKVkNX177y",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Buscar usuário com ID invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?_id=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Buscar usuário com nome invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?nome=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa"
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Buscar usuário com email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?email=AAAaaaaa@qa01.com",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com"
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Buscar usuário com password invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?password=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa"
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Buscar usuário com administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"administrador\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?administrador=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Requisição para gerenciarmento dos usuários, consulta de dados para login com cadastro via administrador"
				},
				{
					"name": "✅Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V04- Validar msg de alerta do campo email\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V05- Validar msg de alerta do campo senha\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V06- Validar msg de alerta do campo adm\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V07- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"password\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\",\r",
											"    \"email\",\r",
											"    \"password\",\r",
											"    \"administrador\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Validar obrigatoriedade do campo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Validar obrigatoriedade do campo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"email\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Validar obrigatoriedade do campo password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"password\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"password\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Validar obrigatoriedade do campo administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"administrador\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Validar email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"email\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"teste###qa.com\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Validar email ja cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de retorno\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"test@teste.com\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Validar administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"administrador\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"{{$randomAbbreviation}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Validar cadastro de usuário como Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Validar cadastro de usuário sem Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "✅Editar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"const login_nome = requestBody.nome;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"pm.environment.unset(\"login_nome\");\r",
											"pm.environment.set(\"login_nome\", login_nome);\r",
											"pm.environment.set(\"newEmail\", login_nome + \"@test.com\");\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Editar nome com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Editar email com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Editar senha com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Editar status Adim pra false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Editar status Adim pra true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Editar todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Editar usuário não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{newEmail}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{newEmail}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "✅Excluir",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"const login_nome = requestBody.nome;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"pm.environment.unset(\"login_nome\");\r",
											"pm.environment.set(\"login_nome\", login_nome);\r",
											"pm.environment.set(\"newEmail\", login_nome + \"@test.com\");\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Excluir usuário nao existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?_id={{idExc}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{idExc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Excluir usuário Nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?nome={{nameExc}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "nome",
											"value": "{{nameExc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Excluir usuário por Função Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?administrador=true",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Excluir usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?password={{passExc}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "password",
											"value": "{{passExc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Excluir usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?email={{emailExc}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "email",
											"value": "{{emailExc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Excluir usuário existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Excluir usuário nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é possível realizar DELETE\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user_exc}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user_exc}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Excluir usuário com dados no carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"{{registro_id}}\", \"{{id}}\")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									"pm.environment.set(\"idExc\", \"123\");\r",
									"pm.environment.set(\"nameExc\", \"excluir\");\r",
									"pm.environment.set(\"emailExc\", \"excluir@excluir\");\r",
									"pm.environment.set(\"passExc\", \"abc123\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "✅Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar token de acesso ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"const login_nome = requestBody.nome;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"pm.environment.unset(\"login_nome\");\r",
											"pm.environment.set(\"login_nome\", login_nome);\r",
											"pm.environment.set(\"newEmail\", login_nome + \"@test.com\");\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed variable redeclaration\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"pm.environment.set(\"authTokenAdmin\", token);\r",
											"\r",
											"//=========================================\r",
											"const token_adm = response.authorization;\r",
											"pm.environment.unset(\"token_adm\");\r",
											"pm.environment.set(\"token_adm\", token_adm);\r",
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"authorization\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"authorization\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/login",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization ",
											"disabled": true
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Validar string no campo preco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"preco\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"preco\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{$randomAdjective}}\",\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Validar cadastro com campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"preco\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"descricao\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\",\r",
											"    \"preco\",\r",
											"    \"descricao\",\r",
											"    \"quantidade\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Validar cadastro com campo Nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"nome\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"nome\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Validar cadastro com campo Preço em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"preco\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"preco\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Validar cadastro com campo Descrição em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"descricao\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"descricao\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Validar cadastro com campo Qde em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Validar cadastro de um produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_prod\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod\", product);\r",
											"pm.environment.set(\"price_prod\", price);\r",
											"pm.environment.set(\"desc_prod\", description);\r",
											"pm.environment.set(\"qde_prod\", qde);\r",
											"\r",
											"\r",
											"//=========================\r",
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Validar produto existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Validar string no campo quantidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomPhrase}}\",\r\n    \"quantidade\": \"{{$randomAdjective}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"const login_nome = requestBody.nome;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"pm.environment.unset(\"login_nome\");\r",
											"pm.environment.set(\"login_nome\", login_nome);\r",
											"pm.environment.set(\"newEmail\", login_nome + \"@test.com\");\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed variable redeclaration\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"pm.environment.set(\"authTokenAdmin\", token);\r",
											"\r",
											"//=========================================\r",
											"const token_adm = response.authorization;\r",
											"pm.environment.unset(\"token_adm\");\r",
											"pm.environment.set(\"token_adm\", token_adm);\r",
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"authorization\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"authorization\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/login",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization ",
											"disabled": true
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT011]Validar produto com usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT012]Validar cadastro sem estar logado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2seg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V05- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/produtos",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "**Swagger**: [https://serverest.dev/#/Produtos](https://serverest.dev/#/Produtos)\n\n**Requisição**: GET / POST / DELETE / PUT\n\n**Descrição**: Consulte produtos cadastrados ou, como administrador, gerencie os produtos da loja.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"/*\r",
					"//=================NAME=================\r",
					"// Lista de nomes aleatórios\r",
					"const names = [\"Lucas\", \"Ana\", \"Carlos\", \"Mariana\", \"João\", \"Isabela\", \"Pedro\", \"Lívia\", \"Felipe\", \"Rafaela\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomName() {\r",
					"    const index = Math.floor(Math.random() * names.length);\r",
					"    return names[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"name\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================NOME PRODUTO=================\r",
					"// Lista de nomes aleatórios\r",
					"const produtcs = [\"Maça\", \"Desinfetante\", \"Esponja de aço\", \"Cafe\", \"Feijao\", \"Arroz\", \"Macarrao\", \"Vassoura\", \"Dedtergente\", \"Sabonete\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomProducts() {\r",
					"    const index = Math.floor(Math.random() * products.length);\r",
					"    return products[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"products\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================EMAIL=================\r",
					"const domains = [\"example.co\", \"mail.co\", \"test.co\", \"fakeemail.co\"];\r",
					"\r",
					"// Função para gerar email aleatório com nome + número + domínio\r",
					"function getRandomEmail(name) {\r",
					"    const randomNum = Math.floor(Math.random() * 1000); // número de 0 a 999\r",
					"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
					"    return `${name.toLowerCase()}${randomNum}@${domain}`;\r",
					"}\r",
					"\r",
					"// Gerar e armazenar as variáveis\r",
					"const name = getRandomName();\r",
					"const email = getRandomEmail(name);\r",
					"\r",
					"pm.environment.set(\"name\", name);\r",
					"pm.environment.set(\"email\", email);\r",
					"\r",
					"\r",
					"\r",
					"//=================STATUS=================\r",
					"//RETONAR ACTIVE OU INACTIVE NO CAMPO STATUS\r",
					"function randomBoolean() {\r",
					"    return Math.random() < 0.5;\r",
					"}\r",
					"let status = randomBoolean() ? \"active\" : \"inactive\";\r",
					"pm.environment.set(\"status\", status);\r",
					"\r",
					"\r",
					"//=================SENHA=================\r",
					"//RETONAR SENHA COM 6 CARACTERES\r",
					"function generatePassword(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r",
					"    let password = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return password;\r",
					"}\r",
					"let senha = generatePassword(8);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"senha_gerada\", senha);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//RETONAR ID COM 10 CARACTERES\r",
					"function generateIdProducts(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    let id = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        id += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return id;\r",
					"}\r",
					"let idProd = generatePassword(10);                 //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"idProd_gerada\", idProd);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//=================PREÇO=================\r",
					"// Gera preços aleatória de 3 caracteres\r",
					"function generateQde(length) {\r",
					"    const chars = '0123456789';\r",
					"    let quantidade = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        quantidade += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return quantidade;\r",
					"}\r",
					"let qde = generateQde(3);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"qde_gerada\", qde);     //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"*/"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	]
}