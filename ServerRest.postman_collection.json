{
	"info": {
		"_postman_id": "b830bc06-e941-4453-9c38-b27ff125e602",
		"name": "ServerRest",
		"description": "README\n\n**O ServeRest é uma API REST gratuita que simula uma loja virtual com intuito de servir de material de estudos de testes de API.**\n\n**Não deixe de seguir o** [<b>autor do projeto</b>](https://github.com/PauloGoncalvesBH) **e deixar um star no repositório:** [<b>github.com/ServeRest/ServeRest</b>](https://github.com/ServeRest/ServeRest)\n\nEssa página documenta todas as rotas e como acessá-las. Para mais detalhes do ServeRest (como executar localmente utilizando Docker ou NPM, alterar timeout de autenticação, etc) acesse [o repositório do ServeRest](https://github.com/serverest/serverest).\n\nEstá utilizando Postman? Importe o [JSON do Swagger](https://raw.githubusercontent.com/ServeRest/ServeRest/trunk/docs/swagger.json) para ter acesso às collections.\n\nVai fazer teste de carga? Leia a seção '[Teste de Carga](https://github.com/ServeRest/ServeRest#teste-de-carga)'.\n\nMuito obrigado ♥ a todos que apoiam o projeto [financeiramente](https://opencollective.com/serverest#section-contributors) ou [com código, ideias e divulgação](https://github.com/ServeRest/ServeRest#contribuidores-), graças a vocês **mais de R$ 2000,00 foram doados para a ONG** [<b>Todas as letras</b>](https://todasasletras.org/) até o momento.\n\nO ServeRest possui um front, com status em beta, não deixe de conhecer: [front.serverest.dev](https://front.serverest.dev/).\n\nPrecisa de apoio? [Abra uma issue](https://github.com/ServeRest/ServeRest/issues) ou contate o mantenedor do projeto:\n\n[Paulo Gonçalves&nbsp;- Website](https://www.linkedin.com/in/paulo-goncalves/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12268149",
		"_collection_link": "https://restless-eclipse-911620.postman.co/workspace/Estudos~39778abb-7414-43e0-af4b-c1d4996580bb/collection/12268149-b830bc06-e941-4453-9c38-b27ff125e602?action=share&source=collection_link&creator=12268149"
	},
	"item": [
		{
			"name": "✅Login",
			"item": [
				{
					"name": "[CT001]Validar dados invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"aaa@aa.aaa\",\r\n    \"password\": \"aaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT002]]Validar campos em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\",\r",
									"    \"password\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT003]]Validar obrigatoriedade do campo email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT004]]Validar obrigatoriedade do campo password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"password\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@teste.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT005]]Validar email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste#qa.com\",\r\n    \"password\": \"abc123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT006]Validar password invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Nome",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"teste@qa.com\",\r\n    \"password\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário como Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Pegar campos específicos do body\r",
									"const login_email = requestBody.email;\r",
									"const login_pass = requestBody.password;\r",
									"\r",
									"// Armazena em variáveis de ambiente\r",
									"pm.environment.set(\"login_email\", login_email)\r",
									"pm.environment.set(\"login_pass\", login_pass);\r",
									"\r",
									"//===================================================================\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/usuarios",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT007]]Validar login Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const token_adm = response.authorization;\r",
									"pm.environment.unset(\"token_adm\");\r",
									"pm.environment.set(\"token_adm\", token_adm);\r",
									"\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorization\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"authorization\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"// Pegar campos específicos do body\r",
									"const email_nok_adm = requestBody.email;\r",
									"const pass_nok_adm = requestBody.password;\r",
									"\r",
									"// Armazena em variáveis de ambiente\r",
									"pm.environment.set(\"email_nok_adm\", email_nok_adm)\r",
									"pm.environment.set(\"pass_nok_adm\", pass_nok_adm);\r",
									"\r",
									"//===================================================================\r",
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"_id\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/usuarios",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[CT008]]Validar login nok Admin com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"V01- Validar o codigo do status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V02- Validar o nome do Status Code\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"V03- Validar se o tempo de resposta é <2msg\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"V04- Validar msg de alerta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"const Ajv = require(\"ajv\")\r",
									"const ajv = new Ajv({allErrors: true, verbose: true});\r",
									"pm.test('V05- Validar o schema do contrato', function () {\r",
									"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"schema\")\r",
									"pm.environment.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorization\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"authorization\"\r",
									"  ]\r",
									"}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Name",
								"value": "Authorization",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email_nok_adm}}\",\r\n    \"password\": \"{{pass_nok_adm}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/login",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "In",
									"value": "header",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Autentique o seu usuário para montar um carrinho e, se for administrador, gerenciar os produtosEndFragment\n\nLogin com sucesso\n\n\\--> Para efetuar o login com sucesso, deverá efetuar o cadstro de um usuário e em seguida efetuar o login com os dados necessários no body\n\nInforme o valor de `Authorization` retornado na rota _/login_\n\nName: `Authorization`\n\nIn: `header`\n\nEndFragment",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Usuários",
			"item": [
				{
					"name": "✅Buscar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"get_nome\", pm.response.json().usuarios[0].nome)\r",
											"pm.environment.set(\"get_email\", pm.response.json().usuarios[0].email)\r",
											"pm.environment.set(\"get_senha\", pm.response.json().usuarios[0].password)\r",
											"pm.environment.set(\"get_adm\", pm.response.json().usuarios[0].administrador)\r",
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0]._id).to.be.eql(pm.environment.get(\"id_user\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?_id={{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Buscar usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].email).to.be.eql(pm.environment.get(\"get_email\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?email={{login_email}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_busca}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{senha_busca}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{login_email}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Buscar usuário por nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].nome).to.be.eql(pm.environment.get(\"get_nome\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?nome={{get_nome}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{pass_cad}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{get_nome}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Buscar usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do email está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].nome).to.be.eql(pm.environment.get(\"get_nome\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?password={{get_senha}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "{{nome_cad}}",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email_cad}}",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										},
										{
											"key": "password",
											"value": "{{get_senha}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Buscar usuário por adminitrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar se a busca do adm está correta\", function () {\r",
											"    pm.expect(pm.response.json().usuarios[0].administrador).to.be.eql(pm.environment.get(\"get_adm\"));\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"nome\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"password\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"administrador\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"nome\",\r",
											"            \"email\",\r",
											"            \"password\",\r",
											"            \"administrador\",\r",
											"            \"_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?administrador=true",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "4alroLhKVkNX177y",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Buscar usuário com ID invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?_id=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa"
										},
										{
											"key": "nome",
											"value": "Teste QA001",
											"disabled": true
										},
										{
											"key": "email",
											"value": "teste@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "testeqa1234",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Buscar usuário com nome invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?nome=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa"
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Buscar usuário com email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?email=AAAaaaaa@qa01.com",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com"
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Buscar usuário com password invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"quantidade\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"usuarios\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"quantidade\",\r",
											"    \"usuarios\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/usuarios?password=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa"
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Buscar usuário com administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V03- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"administrador\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"administrador\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios?administrador=AAAaaaaa",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "email",
											"value": "AAAaaaaa@qa01.com",
											"disabled": true
										},
										{
											"key": "password",
											"value": "AAAaaaaa",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "AAAaaaaa"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Requisição para gerenciarmento dos usuários, consulta de dados para login com cadastro via administrador"
				},
				{
					"name": "✅Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V04- Validar msg de alerta do campo email\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V05- Validar msg de alerta do campo senha\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"V06- Validar msg de alerta do campo adm\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V07- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Validar obrigatoriedade do campo nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Validar obrigatoriedade do campo email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Validar obrigatoriedade do campo password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Validar obrigatoriedade do campo administrador",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"pm.test(\"Response has expected properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"administrador\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Validar email invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"teste###qa.com\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Validar email ja cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"email@usado.com\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Validar administrador invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"algo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Validar cadastro de usuário como Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT010]Validar cadastro de usuário sem Admin com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o nome do Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta do campo nome\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors:true, verbose:true})\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "✅Editar",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"const login_email = requestBody.email;\r",
											"const login_pass = requestBody.password;\r",
											"const login_nome = requestBody.nome;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.unset(\"login_email\");\r",
											"pm.environment.set(\"login_email\", login_email);\r",
											"pm.environment.unset(\"login_pass\");\r",
											"pm.environment.set(\"login_pass\", login_pass);\r",
											"pm.environment.unset(\"login_nome\");\r",
											"pm.environment.set(\"login_nome\", login_nome);\r",
											"//==================================================================\r",
											"\r",
											"//Capturando o ID do usuário criado para uso futuro\r",
											"const response = pm.response.json();\r",
											"const id_user = response._id;\r",
											"pm.environment.unset(\"id_user\");\r",
											"pm.environment.set(\"id_user\", id_user);\r",
											"\r",
											"\r",
											"//===================================================================\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Editar nome com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Editar email com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{login_nome}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{login_pass}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Editar senha com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{login_nome}}\",\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Editar status Adim pra false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{login_nome}}\",\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Editar status Adim pra true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{login_nome}}\",\r\n    \"email\": \"{{login_email}}\",\r\n    \"password\": \"{{login_pass}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Editar todos os campos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/{{id_user}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"{{id_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Editar usuário não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"V01- Validar o Status Code\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"V02- Validar se o tempo de resposta é <2msg\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"V03- Validar msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"const Ajv = require(\"ajv\")\r",
											"const ajv = new Ajv({allErrors: true, verbose: true});\r",
											"pm.test('V04- Validar o schema do contrato', function () {\r",
											"    pm.expect(ajv.validate(pm.environment.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"schema\")\r",
											"pm.environment.set(\"schema\", {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\",\r",
											"    \"_id\"\r",
											"  ]\r",
											"}\r",
											")"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/usuarios/naoendocntrado@11155",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"usuarios",
										"naoendocntrado@11155"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir",
					"item": [
						{
							"name": "Cadastro de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_exc\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_exc\", username);\r",
											"pm.environment.set(\"email_exc\", email);\r",
											"pm.environment.set(\"pass_exc\", password);\r",
											"pm.environment.set(\"adm_exc\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Excluir usuário nao existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 400ms\r",
											"pm.test(\"Response time is less than 400ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Verify that the response body has a message property\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?_id={{id_user_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_user_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Excluir usuário Nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Verify the response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the response body structure\r",
											"const responseBody = pm.response.json();\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check that the message property is a string\r",
											"pm.test(\"Message property is a string\", function () {\r",
											"    pm.expect(responseBody.message).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?nome={{nome_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "nome",
											"value": "{{nome_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Excluir usuário por Função Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check the response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"const responseBody = pm.response.json();\r",
											"\r",
											"// Check if the message property exists\r",
											"pm.test(\"Response has message property\", function () {\r",
											"    pm.expect(responseBody).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check if the message is a string\r",
											"pm.test(\"Message is a string\", function () {\r",
											"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?administrador={{adm_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "administrador",
											"value": "{{adm_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Excluir usuário por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Test for successful response status code\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(405);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?password={{pass_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "password",
											"value": "{{pass_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Excluir usuário por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Check that the message is a string\r",
											"pm.test(\"Message is a string\", function () {\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios?email={{email_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "email",
											"value": "{{email_exc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Excluir usuário existente por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate message in response body\r",
											"pm.test(\"Response message is correct\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.exist;\r",
											"    pm.expect(response.message).to.equal(\"Registro excluído com sucesso\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios/{{id_user_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios",
										"{{id_user_exc}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Excluir usuário nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 500ms\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check if response body has the expected message structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios/{{id_user_exc}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios",
										"{{id_user_exc}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Excluir usuário com dados no carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"{{registro_id}}\", \"{{id}}\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios/{{id}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "[CT001]Validar token de acesso ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_nAdm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_nAdm\", username);\r",
											"pm.environment.set(\"email_nAdm\", email);\r",
											"pm.environment.set(\"pass_nAdm\", password);\r",
											"pm.environment.set(\"adm_nAdm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenNaoAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_nAdm}}\",\r\n    \"password\": \"{{pass_nAdm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Validar cadastro com usuário não Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenNaoAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{$randomPrice}},\r\n    \"descricao\": \"{{$randomProduct}}\",\r\n    \"quantidade\": \"{{qde}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_Adm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_Adm\", username);\r",
											"pm.environment.set(\"email_Adm\", email);\r",
											"pm.environment.set(\"pass_Adm\", password);\r",
											"pm.environment.set(\"adm_Adm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Validar cadastro com campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate that the response body has the expected properties\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response body has the expected properties\", function () {\r",
											"    pm.expect(response).to.have.all.keys('nome', 'preco', 'descricao', 'quantidade');\r",
											"});\r",
											"\r",
											"// Validate the specific error messages in the response body\r",
											"pm.test(\"Error messages are present in the response\", function () {\r",
											"    pm.expect(response.nome).to.equal(\"nome não pode ficar em branco\");\r",
											"    pm.expect(response.preco).to.equal(\"preco deve ser um número\");\r",
											"    pm.expect(response.descricao).to.equal(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(response.quantidade).to.equal(\"quantidade deve ser um número\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Validar cadastro com campo Nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Check if response has 'nome' field\r",
											"pm.test(\"Response has 'nome' field\", function () {\r",
											"    pm.expect(response).to.have.property('nome');\r",
											"});\r",
											"\r",
											"// Check if 'nome' field is a string\r",
											"pm.test(\"'nome' field is a string\", function () {\r",
											"    pm.expect(response.nome).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Validar cadastro com campo Preço em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 500ms\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has required properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"preco\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Validar cadastro com campo Descrição em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response body structure\r",
											"pm.test(\"Response body has descricao property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"descricao\");\r",
											"});\r",
											"\r",
											"// Validate descricao property is a string\r",
											"pm.test(\"descricao property is a string\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.descricao).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// Check response time is within acceptable limit (e.g., less than 300ms)\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"\",\r\n    \"quantidade\": {{qde_gerada}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT007]Validar cadastro com campo Qde em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Check that the response body is valid JSON\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Check that the response body contains the 'quantidade' field\r",
											"pm.test(\"Response body contains 'quantidade' field\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property(\"quantidade\");\r",
											"});\r",
											"\r",
											"// Check that the 'quantidade' field is a string\r",
											"pm.test(\"'quantidade' field is a string\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.quantidade).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": {{qde_gerada}},\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT008]Validar cadastro de um produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_prod\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod\", product);\r",
											"pm.environment.set(\"price_prod\", price);\r",
											"pm.environment.set(\"desc_prod\", description);\r",
											"pm.environment.set(\"qde_prod\", qde);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Produto salvo:\", product);\r",
											"console.log(\"Preço salvo:\", price);\r",
											"console.log(\"Descrição salvo:\", description);\r",
											"console.log(\"Qde salvo\", qde);\r",
											"\r",
											"//=========================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT009]Validar produto existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Buscar",
					"item": [
						{
							"name": "Buscar com usuário não Admin",
							"item": [
								{
									"name": "Cadastrar usuário não Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_user_nAdm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_nAdm\", username);\r",
													"pm.environment.set(\"email_nAdm\", email);\r",
													"pm.environment.set(\"pass_nAdm\", password);\r",
													"pm.environment.set(\"adm_nAdm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"false\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/usuarios",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logar com usuario não Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenNaoAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_nAdm}}\",\r\n    \"password\": \"{{pass_nAdm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenNaoAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT001]Buscar produto nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenNaoAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/fKVxggRtJiudPGfF",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"fKVxggRtJiudPGfF"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT002]Buscar produto com dados invalidos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenNaoAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/Adcf@124",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"Adcf@124"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT003]Buscar por ID do produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenNaoAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"{{id_prod}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Buscar com usuario Admin",
							"item": [
								{
									"name": "Cadastrar usuário Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.globals.set(\"id_user_Adm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_Adm\", username);\r",
													"pm.environment.set(\"email_Adm\", email);\r",
													"pm.environment.set(\"pass_Adm\", password);\r",
													"pm.environment.set(\"adm_Adm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/usuarios",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logar com usuario Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT001]Buscar por produto não cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/fKVxggRtJiudPGfF",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"fKVxggRtJiudPGfF"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT002]Buscar produto com dados invalidos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/Adcf@124",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"Adcf@124"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT003]Buscar produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome\");\r",
													"    pm.expect(pm.response.text()).to.include(\"preco\");\r",
													"    pm.expect(pm.response.text()).to.include(\"descricao\");\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"{{id_prod}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT004]Buscar produto por nome do produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome\");\r",
													"    pm.expect(pm.response.text()).to.include(\"preco\");\r",
													"    pm.expect(pm.response.text()).to.include(\"descricao\");\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});\r",
													"\r",
													"// Validate each user object in 'usuarios' array\r",
													"response.produtos.forEach(user => {\r",
													"    pm.test(\"User has required properties\", function () {\r",
													"        pm.expect(user).to.have.all.keys(\"nome\", \"preco\", \"descricao\", \"quantidade\", \"_id\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?nome={{name_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "nome",
													"value": "{{name_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT005]Buscar produto por preço",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome\");\r",
													"    pm.expect(pm.response.text()).to.include(\"preco\");\r",
													"    pm.expect(pm.response.text()).to.include(\"descricao\");\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});\r",
													"\r",
													"// Validate each user object in 'usuarios' array\r",
													"response.produtos.forEach(user => {\r",
													"    pm.test(\"User has required properties\", function () {\r",
													"        pm.expect(user).to.have.all.keys(\"nome\", \"preco\", \"descricao\", \"quantidade\", \"_id\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?preco={{price_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "preco",
													"value": "{{price_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT006]Buscar produto por descrição",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome\");\r",
													"    pm.expect(pm.response.text()).to.include(\"preco\");\r",
													"    pm.expect(pm.response.text()).to.include(\"descricao\");\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});\r",
													"\r",
													"// Validate each user object in 'usuarios' array\r",
													"response.produtos.forEach(user => {\r",
													"    pm.test(\"User has required properties\", function () {\r",
													"        pm.expect(user).to.have.all.keys(\"nome\", \"preco\", \"descricao\", \"quantidade\", \"_id\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?descricao={{desc_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "descricao",
													"value": "{{desc_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT007]Buscar produto por quantiade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome\");\r",
													"    pm.expect(pm.response.text()).to.include(\"preco\");\r",
													"    pm.expect(pm.response.text()).to.include(\"descricao\");\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});\r",
													"\r",
													"// Validate each user object in 'usuarios' array\r",
													"response.produtos.forEach(user => {\r",
													"    pm.test(\"User has required properties\", function () {\r",
													"        pm.expect(user).to.have.all.keys(\"nome\", \"preco\", \"descricao\", \"quantidade\", \"_id\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?quantidade={{qde_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "quantidade",
													"value": "{{qde_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT008]Buscar produto por nome nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?nome=aaaaaaaa",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "nome",
													"value": "aaaaaaaa"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT009]Buscar produto por preço nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?preco=000001",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "preco",
													"value": "000001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT010]Buscar produto por descrição nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?descricao=nao tem",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "descricao",
													"value": "nao tem"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT011]Buscar produto por quantidade nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response structure\r",
													"const response = pm.response.json();\r",
													"pm.test(\"Response has 'quantidade' and 'usuarios'\", function () {\r",
													"    pm.expect(response).to.have.property(\"quantidade\");\r",
													"    pm.expect(response).to.have.property(\"produtos\");\r",
													"});\r",
													"\r",
													"// Validate 'quantidade' is a number\r",
													"pm.test(\"'quantidade' is a number\", function () {\r",
													"    pm.expect(response.quantidade).to.be.a('number');\r",
													"});\r",
													"\r",
													"// Validate 'usuarios' is an array\r",
													"pm.test(\"'produtos' is an array\", function () {\r",
													"    pm.expect(response.produtos).to.be.an('array');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?quantidade=123456789",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "quantidade",
													"value": "123456789"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Excluir",
					"item": [
						{
							"name": "Excluir com usuario Admin",
							"item": [
								{
									"name": "Cadastrar usuário Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.globals.set(\"id_user_Adm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_Adm\", username);\r",
													"pm.environment.set(\"email_Adm\", email);\r",
													"pm.environment.set(\"pass_Adm\", password);\r",
													"pm.environment.set(\"adm_Adm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/usuarios",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logar com usuario Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT001]Excluir produto nao cadastrado",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Nenhum registro excluído\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"    pm.expect(response.message).to.be.a('string');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/fKVxggRtJiudPGfF",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"fKVxggRtJiudPGfF"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT002]Excluir produto invalido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id deve ter exatamente 16 caracteres alfanuméricos\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('id');\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/5454fdfd",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"5454fdfd"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT003]Excluir produto por nome",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?nome={{name_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "nome",
													"value": "{{name_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT004]Excluir produto por preço",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?preco={{price_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "preco",
													"value": "{{price_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT005]Excluir produto por descrição",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?descricao={{desc_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "descricao",
													"value": "{{desc_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT006]Excluir produto por quantidade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/?quantidade={{qde_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												""
											],
											"query": [
												{
													"key": "quantidade",
													"value": "{{qde_prod}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT007]Excluir produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"{{id_prod}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT008]Excluir produto no carrinho",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir produto que faz parte de carrinho\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"{{id_prod}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir com cadastro não Admin",
							"item": [
								{
									"name": "Cadastrar usuário Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.globals.set(\"id_user_nAdm\", id);\r",
													"\r",
													"\r",
													"//===========================================\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let username = requestBody.nome;\r",
													"let email = requestBody.email;\r",
													"let password = requestBody.password;\r",
													"let adm = requestBody.administrador;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"nome_nAdm\", username);\r",
													"pm.environment.set(\"email_nAdm\", email);\r",
													"pm.environment.set(\"pass_nAdm\", password);\r",
													"pm.environment.set(\"adm_nAdm\", adm);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Nome salvo:\", username);\r",
													"console.log(\"Email salvo:\", email);\r",
													"console.log(\"Senha salvo:\", password);\r",
													"console.log(\"Admin salvo\", adm);\r",
													"//========================================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/usuarios",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "Logar com usuario Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Converte o response em JSON\r",
													"let response = pm.response.json();\r",
													"\r",
													"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
													"let rawToken = response.authorization;\r",
													"\r",
													"// Remove o prefixo \"Bearer \" se existir\r",
													"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
													"\r",
													"// Salva apenas o token limpo em variável de ambiente\r",
													"if (token) {\r",
													"    pm.globals.set(\"authTokenNaoAdmin\", token);\r",
													"    console.log(\"Token capturado (sem Bearer):\", token);\r",
													"} else {\r",
													"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
													"}\r",
													"//=========================================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "Authorization",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email_nAdm}}\",\r\n    \"password\": \"{{pass_nAdm}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"login"
											],
											"query": [
												{
													"key": "Name",
													"value": "Authorization "
												},
												{
													"key": "In",
													"value": "header",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Cadastrar um produto",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
													"let response = pm.response.json();\r",
													"let id = response._id;\r",
													"pm.environment.set(\"id_prod\", id);\r",
													"\r",
													"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
													"let requestBody = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Pegar campos específicos do body\r",
													"let product = requestBody.nome;\r",
													"let price = requestBody.preco;\r",
													"let description = requestBody.descricao;\r",
													"let qde = requestBody.quantidade;\r",
													"\r",
													"// Armazena em variáveis de ambiente\r",
													"pm.environment.set(\"name_prod\", product);\r",
													"pm.environment.set(\"price_prod\", price);\r",
													"pm.environment.set(\"desc_prod\", description);\r",
													"pm.environment.set(\"qde_prod\", qde);\r",
													"\r",
													"// Log no console para conferir\r",
													"console.log(\"Produto salvo:\", product);\r",
													"console.log(\"Preço salvo:\", price);\r",
													"console.log(\"Descrição salvo:\", description);\r",
													"console.log(\"Qde salvo\", qde);\r",
													"\r",
													"//=========================\r",
													"\r",
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//RETORNO DO RESPONSE\r",
													"pm.test(\"Exibe a msg de alerta\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"// Check content type of the response\r",
													"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "[CT007]Excluir produto por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//RETORNO DO CODIGO E O STATUS\r",
													"pm.test(\"Status code retorna 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    pm.response.to.have.status(\"Forbidden\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"// Validate response body structure\r",
													"pm.test(\"Response body has expected structure\", function () {\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response).to.have.all.keys('message');\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Rota exclusiva para administradores\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{authTokenNaoAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
											"host": [
												"{{URL_ServerRest}}"
											],
											"path": [
												"produtos",
												"{{id_prod}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Editar",
					"item": [
						{
							"name": "Cadastrar usuário Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_Adm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_Adm\", username);\r",
											"pm.environment.set(\"email_Adm\", email);\r",
											"pm.environment.set(\"pass_Adm\", password);\r",
											"pm.environment.set(\"adm_Adm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"    pm.expect(pm.response.text()).to.include(\"_id\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar um produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.environment.set(\"id_prod\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod\", product);\r",
											"pm.environment.set(\"price_prod\", price);\r",
											"pm.environment.set(\"desc_prod\", description);\r",
											"pm.environment.set(\"qde_prod\", qde);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Produto salvo:\", product);\r",
											"console.log(\"Preço salvo:\", price);\r",
											"console.log(\"Descrição salvo:\", description);\r",
											"console.log(\"Qde salvo\", qde);\r",
											"\r",
											"//=========================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Editar produto com sem token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomAdjective}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"{{id_prod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Editar produto sem ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomAdjective}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Editar nome do produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"{{id_prod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Editar preço do produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{desc_prod}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"{{id_prod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT005]Editar descrição do produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{$randomAdjective}}}\",\r\n    \"quantidade\": \"{{qde_prod}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"{{id_prod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Editar quantidade do produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name_prod}}\",\r\n    \"preco\": \"{{price_prod}}\",\r\n    \"descricao\": \"{{desc_prod}}}\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/{{id_prod}}",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"{{id_prod}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT006]Editar produto não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response).to.have.property(\"_id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos/abc123abc456asde",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos",
										"abc123abc456asde"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "**Swagger**: [https://serverest.dev/#/Produtos](https://serverest.dev/#/Produtos)\n\n**Requisição**: GET / POST / DELETE / PUT\n\n**Descrição**: Consulte produtos cadastrados ou, como administrador, gerencie os produtos da loja.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Carrinho",
			"item": [
				{
					"name": "Cadastrar",
					"item": [
						{
							"name": "Cadastrar usuário Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_user_Adm\", id);\r",
											"\r",
											"\r",
											"//===========================================\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let username = requestBody.nome;\r",
											"let email = requestBody.email;\r",
											"let password = requestBody.password;\r",
											"let adm = requestBody.administrador;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"nome_Adm\", username);\r",
											"pm.environment.set(\"email_Adm\", email);\r",
											"pm.environment.set(\"pass_Adm\", password);\r",
											"pm.environment.set(\"adm_Adm\", adm);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Nome salvo:\", username);\r",
											"console.log(\"Email salvo:\", email);\r",
											"console.log(\"Senha salvo:\", password);\r",
											"console.log(\"Admin salvo\", adm);\r",
											"//========================================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{name}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{senha_gerada}}\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/usuarios",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logar com usuario Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Converte o response em JSON\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Supondo que o token venha como \"Bearer xxxxxxx\"\r",
											"let rawToken = response.authorization;\r",
											"\r",
											"// Remove o prefixo \"Bearer \" se existir\r",
											"let token = rawToken ? rawToken.replace(/^Bearer\\s+/i, '') : null;\r",
											"\r",
											"// Salva apenas o token limpo em variável de ambiente\r",
											"if (token) {\r",
											"    pm.globals.set(\"authTokenAdmin\", token);\r",
											"    console.log(\"Token capturado (sem Bearer):\", token);\r",
											"} else {\r",
											"    console.warn(\"⚠️ Nenhum token encontrado no response.\");\r",
											"}\r",
											"//=========================================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Retorna o Status Code 200 Bad Request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "name",
										"value": "Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_Adm}}\",\r\n    \"password\": \"{{pass_Adm}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/login?Name=Authorization ",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "Name",
											"value": "Authorization "
										},
										{
											"key": "In",
											"value": "header",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar um produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_prod1\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod1\", product);\r",
											"pm.environment.set(\"price_prod1\", price);\r",
											"pm.environment.set(\"desc_prod1\", description);\r",
											"pm.environment.set(\"qde_prod1\", qde);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Produto salvo:\", product);\r",
											"console.log(\"Preço salvo:\", price);\r",
											"console.log(\"Descrição salvo:\", description);\r",
											"console.log(\"Qde salvo\", qde);\r",
											"\r",
											"//=========================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar outro produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//SANVANDO O RETORNO DA REQUISIÇÃO\r",
											"let response = pm.response.json();\r",
											"let id = response._id;\r",
											"pm.globals.set(\"id_prod2\", id);\r",
											"\r",
											"//SALVANDO O REQUEST BODY DA REQUISIÇÃO\r",
											"let requestBody = JSON.parse(pm.request.body.raw);\r",
											"\r",
											"// Pegar campos específicos do body\r",
											"let product = requestBody.nome;\r",
											"let price = requestBody.preco;\r",
											"let description = requestBody.descricao;\r",
											"let qde = requestBody.quantidade;\r",
											"\r",
											"// Armazena em variáveis de ambiente\r",
											"pm.environment.set(\"name_prod2\", product);\r",
											"pm.environment.set(\"price_prod2\", price);\r",
											"pm.environment.set(\"desc_prod2\", description);\r",
											"pm.environment.set(\"qde_prod2\", qde);\r",
											"\r",
											"// Log no console para conferir\r",
											"console.log(\"Produto salvo:\", product);\r",
											"console.log(\"Preço salvo:\", price);\r",
											"console.log(\"Descrição salvo:\", description);\r",
											"console.log(\"Qde salvo\", qde);\r",
											"\r",
											"//=========================\r",
											"\r",
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"{{$randomProductName}}\",\r\n    \"preco\": \"{{qde_gerada}}\",\r\n    \"descricao\": \"{{$randomProductMaterial}}\",\r\n    \"quantidade\": \"{{qde_gerada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/produtos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT001]Cadastrar carrinho com campos em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"produtos não contém 1 valor obrigatório\");\r",
											"    pm.expect(pm.response.text()).to.include(\"produtos[0].idProduto não pode ficar em branco\");\r",
											"    pm.expect(pm.response.text()).to.include(\"produtos[1].idProduto não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"produtos\");\r",
											"    pm.expect(response.produtos).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"\",\r\n            \"quantidade\": 2\r\n        },\r\n        {\r\n            \"idProduto\": \"\",\r\n            \"quantidade\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/carrinhos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT002]Cadastrar carrinho sem estar logado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"{{id_prod1}}\",\r\n            \"quantidade\": 2\r\n        },\r\n        {\r\n            \"idProduto\": \"{{id_prod2}}\",\r\n            \"quantidade\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/carrinhos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT003]Cadastrar mais de 1 carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido ter mais de 1 carrinho\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"{{id_prod1}}\",\r\n            \"quantidade\": 200\r\n        },\r\n        {\r\n            \"idProduto\": \"{{id_prod2}}\",\r\n            \"quantidade\": 300\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/carrinhos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CT004]Cadastrar carrinho com produto nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//RETORNO DO CODIGO E O STATUS\r",
											"pm.test(\"Status code retorna 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//RETORNO DO RESPONSE\r",
											"pm.test(\"Exibe a msg de alerta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Não é permitido ter mais de 1 carrinho\");\r",
											"});\r",
											"\r",
											"// Check the response time is less than 300ms\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Check content type of the response\r",
											"pm.test(\"Response should have Content-Type as application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate the structure of the response body\r",
											"pm.test(\"Response body has a message property\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"    pm.expect(response.message).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{authTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"BeeJh5547lz3k6kSIzA\",\r\n            \"quantidade\": 1\r\n        },\r\n        {\r\n            \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n            \"quantidade\": 3\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL_ServerRest}}/carrinhos",
									"host": [
										"{{URL_ServerRest}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Buscar",
					"item": []
				},
				{
					"name": "Excluir",
					"item": []
				}
			],
			"description": "URL:[https://serverest.dev/#/Carrinhos/post_carrinhos](https://serverest.dev/#/Carrinhos/post_carrinhos)\n\nRequisições: POST, GET e DELETE\n\nInformações: O carrinho é vinculado ao usuário do token enviado no header `Authorization`, sendo possível cadastrar apenas 1 carrinho por usuário. Ao cadastrar carrinho com sucesso é feita a redução da quantidade no cadastro de cada produto inserido no carrinho.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlQHFhMDEuY29tIiwicGFzc3dvcmQiOiJ0ZXN0ZXFhMTIzNCIsImlhdCI6MTc1NzE5ODcxMiwiZXhwIjoxNzU3MTk5MzEyfQ.M0UKt4CADDBS-Lpf4VWDyDCF8boMwbco5gowmlnjpqE",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"//=================NAME=================\r",
					"// Lista de nomes aleatórios\r",
					"const names = [\"Lucas\", \"Ana\", \"Carlos\", \"Mariana\", \"João\", \"Isabela\", \"Pedro\", \"Lívia\", \"Felipe\", \"Rafaela\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomName() {\r",
					"    const index = Math.floor(Math.random() * names.length);\r",
					"    return names[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"name\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================NOME PRODUTO=================\r",
					"// Lista de nomes aleatórios\r",
					"const produtcs = [\"Maça\", \"Desinfetante\", \"Esponja de aço\", \"Cafe\", \"Feijao\", \"Arroz\", \"Macarrao\", \"Vassoura\", \"Dedtergente\", \"Sabonete\"];\r",
					"\r",
					"// Função para escolher um nome aleatório da lista\r",
					"function getRandomProducts() {\r",
					"    const index = Math.floor(Math.random() * products.length);\r",
					"    return products[index];\r",
					"}\r",
					"\r",
					"// Define a variável 'name' no ambiente\r",
					"pm.environment.set(\"products\", getRandomName());\r",
					"\r",
					"\r",
					"\r",
					"//=================EMAIL=================\r",
					"const domains = [\"example.co\", \"mail.co\", \"test.co\", \"fakeemail.co\"];\r",
					"\r",
					"// Função para gerar email aleatório com nome + número + domínio\r",
					"function getRandomEmail(name) {\r",
					"    const randomNum = Math.floor(Math.random() * 1000); // número de 0 a 999\r",
					"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
					"    return `${name.toLowerCase()}${randomNum}@${domain}`;\r",
					"}\r",
					"\r",
					"// Gerar e armazenar as variáveis\r",
					"const name = getRandomName();\r",
					"const email = getRandomEmail(name);\r",
					"\r",
					"pm.environment.set(\"name\", name);\r",
					"pm.environment.set(\"email\", email);\r",
					"\r",
					"\r",
					"\r",
					"//=================STATUS=================\r",
					"//RETONAR ACTIVE OU INACTIVE NO CAMPO STATUS\r",
					"function randomBoolean() {\r",
					"    return Math.random() < 0.5;\r",
					"}\r",
					"let status = randomBoolean() ? \"active\" : \"inactive\";\r",
					"pm.environment.set(\"status\", status);\r",
					"\r",
					"\r",
					"//=================SENHA=================\r",
					"//RETONAR SENHA COM 6 CARACTERES\r",
					"function generatePassword(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r",
					"    let password = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        password += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return password;\r",
					"}\r",
					"let senha = generatePassword(8);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"senha_gerada\", senha);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//RETONAR ID COM 10 CARACTERES\r",
					"function generateIdProducts(length) {\r",
					"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    let id = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        id += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return id;\r",
					"}\r",
					"let idProd = generatePassword(10);                 //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"idProd_gerada\", idProd);      //ARMAZENA EM VARIÁVEL DO POSTMAN\r",
					"\r",
					"\r",
					"//=================PREÇO=================\r",
					"// Gera preços aleatória de 3 caracteres\r",
					"function generateQde(length) {\r",
					"    const chars = '0123456789';\r",
					"    let quantidade = '';\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        quantidade += chars.charAt(Math.floor(Math.random() * chars.length));\r",
					"    }\r",
					"    return quantidade;\r",
					"}\r",
					"let qde = generateQde(3);                //GERA A VARIAVEL NO POSTMAN\r",
					"pm.environment.set(\"qde_gerada\", qde);     //ARMAZENA EM VARIÁVEL DO POSTMAN"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	]
}